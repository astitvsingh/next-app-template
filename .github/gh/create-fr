#!/bin/bash
# Copyright 2025 © Astitv Singh <https://github.com/astitvsingh>.
# SPDX-License-Identifier: GPL-3.0

# USAGE:
# Automates the creation of a GitHub feature request issue and sets up a feature branch using git flow.
#
# Run this script with:
# bash ./.github/gh/create-fr
#
# Prerequisites:
# - GitHub CLI (`gh`) is authenticated.
# - jq is installed for JSON parsing.
# - Git flow is initialized in the repository.
# - The script should be executed from the repository root directory.

# Ensure the script exits on errors and undefined variables
set -euo pipefail

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Script configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly REPO_ROOT="$(git rev-parse --show-toplevel)"
readonly BODY_FILE="${SCRIPT_DIR}/../FR_BODY.md"
readonly DEFAULT_BRANCH="develop"

# Default issue configuration
readonly TITLE_TAG="✨[FR]:"
readonly TITLE_SUMMARY="Setup Auth Micro-Service"
readonly LABELS=("✨ Feature Request" "🌟 Feature" "enhancement")
readonly ASSIGNEE="astitvsingh"

# Logging functions
log_info() {
  echo -e "${BLUE}ℹ️  INFO:${NC} $1"
}

log_success() {
  echo -e "${GREEN}✅ SUCCESS:${NC} $1"
}

log_warning() {
  echo -e "${YELLOW}⚠️  WARNING:${NC} $1"
}

log_error() {
  echo -e "${RED}❌ ERROR:${NC} $1"
}

# Validation functions
check_prerequisites() {
  log_info "Checking prerequisites..."

  # Check if gh is installed and authenticated
  if ! command -v gh &>/dev/null; then
    log_error "GitHub CLI (gh) is not installed"
    exit 1
  fi

  if ! gh auth status &>/dev/null; then
    log_error "GitHub CLI is not authenticated"
    exit 1
  fi

  # Check if jq is installed
  if ! command -v jq &>/dev/null; then
    log_error "jq is not installed"
    exit 1
  fi

  # Check if we're in a git repository
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    log_error "Not in a git repository"
    exit 1
  fi

  # Check if FR_BODY.md exists
  if [ ! -f "$BODY_FILE" ]; then
    log_error "FR_BODY.md not found at $BODY_FILE"
    exit 1
  fi

  log_success "All prerequisites met"
}

# Main functions
create_feature_request() {
  local title="$TITLE_TAG $TITLE_SUMMARY"
  local labels_str=$(
    IFS=,
    echo "${LABELS[*]}"
  )

  log_info "Creating feature request..."
  log_info "Title: $title"
  log_info "Labels: $labels_str"
  log_info "Assignee: $ASSIGNEE"

  if gh issue create \
    --title "$title" \
    --body-file "$BODY_FILE" \
    --label "$labels_str" \
    --assignee "$ASSIGNEE"; then
    log_success "Feature request created successfully"
  else
    log_error "Failed to create feature request"
    exit 1
  fi
}

clear_body_file() {
  log_info "Clearing FR_BODY.md..."
  if >"$BODY_FILE"; then
    log_success "FR_BODY.md cleared successfully"
  else
    log_warning "Failed to clear FR_BODY.md"
  fi
}

sync_repository() {
  log_info "Syncing with $DEFAULT_BRANCH branch..."

  # Fetch latest changes
  if ! git fetch origin "$DEFAULT_BRANCH"; then
    log_error "Failed to fetch from origin"
    exit 1
  fi

  # Pull latest changes
  if ! git pull origin "$DEFAULT_BRANCH"; then
    log_error "Failed to pull from origin"
    exit 1
  fi

  log_success "Repository synced successfully"
}

# Main execution
main() {
  log_info "Starting feature request creation process..."

  # Check prerequisites
  check_prerequisites

  # Create feature request
  create_feature_request

  # Clear body file
  clear_body_file

  # Sync repository
  sync_repository

  log_success "Feature request process completed successfully"
}

# Trap errors
trap 'log_error "An error occurred. Exiting..."' ERR

# Run main function
main
